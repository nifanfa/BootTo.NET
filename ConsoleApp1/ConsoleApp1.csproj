<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
	  
    <NoStdLib>true</NoStdLib>
    <NoConfig>true</NoConfig>
    <RuntimeMetadataVersion>v4.0.30319</RuntimeMetadataVersion>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>

    <IlcSystemModule>ConsoleApp1</IlcSystemModule>
    <EntryPointSymbol>EfiMain</EntryPointSymbol>

    <LinkerSubsystem>EFI_APPLICATION</LinkerSubsystem>
  </PropertyGroup>

  <Target Name="CheckAdmin" AfterTargets="Publish">
	  <Message Text="               _             _           _____              " Importance="High" />
	  <Message Text="     /\       | |           (_)         |  __ \             " Importance="High" />
	  <Message Text="    /  \    __| | _ __ ___   _  _ __    | |__) | ___   __ _ " Importance="High" />
	  <Message Text="   / /\ \  / _` || '_ ` _ \ | || '_ \   |  _  / / _ \ / _` |" Importance="High" />
	  <Message Text="  / ____ \| (_| || | | | | || || | | |  | | \ \|  __/| (_| |" Importance="High" />
	  <Message Text=" /_/    \_\\__,_||_| |_| |_||_||_| |_|  |_|  \_\\___| \__, |" Importance="High" />
	  <Message Text="                                                         |_|" Importance="High" />
	  <Warning Text="You must run Visual Studio as administrator! Because creating vhd requires admin rights" />
  </Target>

  <Target Name="CreateVHD" AfterTargets="CopyEFI">
	  <PropertyGroup>
		  <VHDFilePath>$(MSBuildProjectDirectory)\$(NativeOutputPath)$(TargetName).vhd</VHDFilePath>
		  <AttachVHDLines>
			  create vdisk file="$(VHDFilePath)" maximum=500
			  select vdisk file="$(VHDFilePath)"
			  attach vdisk
			  convert gpt
			  create partition efi size=100
			  format quick fs=fat32 label="System"
			  assign letter=Z
		  </AttachVHDLines>
		  <DetachVHDLines>
			  select vdisk file="$(VHDFilePath)"
			  select partition 2
			  remove letter=Z
			  detach vdisk
		  </DetachVHDLines>
	  </PropertyGroup>
	  <Delete Files="$(VHDFilePath)" />
	  <WriteLinesToFile File="$(MSBuildProjectDirectory)\$(NativeOutputPath)temp.txt" Overwrite="true" Lines="$(AttachVHDLines)" />
	  <Exec Command="diskpart /s &quot;$(MSBuildProjectDirectory)\$(NativeOutputPath)temp.txt&quot;" />
	  <Exec Command="xcopy.exe  &quot;$(MSBuildProjectDirectory)\..\Drive\&quot; &quot;Z:\&quot; /e" />
	  <WriteLinesToFile File="$(MSBuildProjectDirectory)\$(NativeOutputPath)temp.txt" Overwrite="true" Lines="$(DetachVHDLines)" />
	  <Exec Command="diskpart /s &quot;$(MSBuildProjectDirectory)\$(NativeOutputPath)temp.txt&quot;" />
	  <Message Text="Created VHDX at $(VHDFilePath)." Importance="High" />
  </Target>

  <Target Name="CopyEFI" AfterTargets="CheckAdmin">
	  <Copy SourceFiles="$(MSBuildProjectDirectory)\$(NativeOutputPath)$(TargetName)$(NativeBinaryExt)" DestinationFiles="$(MSBuildProjectDirectory)\..\Drive\EFI\BOOT\BOOTX64.efi"></Copy>
  </Target>

  <Target Name="RunVMware" AfterTargets="CreateVHD">
	  <Error Text="Please install VMWare Player in order to Run BootTo.NET!" Condition="!Exists('C:\Program Files (x86)\VMware\VMware Player\vmplayer.exe')And!Exists('C:\Program Files (x86)\VMware\VMware Workstation\vmplayer.exe')"></Error>

	  <Exec Condition="Exists('C:\Program Files (x86)\VMware\VMware Workstation\vmplayer.exe')" Command="&quot;C:\Program Files (x86)\VMware\VMware Workstation\vmplayer.exe&quot; &quot;$(MSBuildProjectDirectory)\..\Virtual Machines\BootTo.NET\BootTo.NET.vmx"></Exec>
	  <Exec Condition="Exists('C:\Program Files (x86)\VMware\VMware Player\vmplayer.exe')And!Exists('C:\Program Files (x86)\VMware\VMware Workstation\vmplayer.exe')" Command="&quot;C:\Program Files (x86)\VMware\VMware Player\vmplayer.exe&quot; &quot;$(MSBuildProjectDirectory)\..\Virtual Machines\BootTo.NET\BootTo.NET.vmx"></Exec>
  </Target>

  <ItemGroup>
    <Content Include="Properties\launchSettings.json" />
  </ItemGroup>

  <!--Warning: This package is modified(/packages). Using official one may cause it fail to compile!-->
  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.ILCompiler" Version="7.0.0-alpha.1.22074.1" />
  </ItemGroup>

	<!-- The project file pretends this is .NET, but it's not .NET. Remove all assembly references the .NET SDK added. -->
	<Target Name="CustomizeReferences" BeforeTargets="BeforeCompile" AfterTargets="FindReferenceAssembliesForReferences">
		<ItemGroup>
			<ReferencePathWithRefAssemblies Remove="@(ReferencePathWithRefAssemblies)" Condition="%(Filename) != 'CoreLib'" />
			<ReferencePath Remove="@(ReferencePath)" />
		</ItemGroup>
	</Target>

  <!-- The AOT compiler would want to mirror these as AppContext switches. Prevent that. -->
  <Target Name="RemoveHostConfigurationOptions" BeforeTargets="WriteIlcRspFileForCompilation" DependsOnTargets="PrepareForILLink">
    <ItemGroup>
      <RuntimeHostConfigurationOption Remove="@(RuntimeHostConfigurationOption)" />
    </ItemGroup>
  </Target>
  <Import Project="..\CoreLib\CoreLib.projitems" Label="Shared" />
  <Import Project="..\uefi-cs\uefi-cs.projitems" Label="Shared" />

</Project>
